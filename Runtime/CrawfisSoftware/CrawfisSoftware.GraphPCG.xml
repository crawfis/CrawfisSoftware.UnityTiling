<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CrawfisSoftware.GraphPCG</name>
    </assembly>
    <members>
        <member name="T:CrawfisSoftware.PCG.BitEnumerators">
            <summary>
            Two static utility methods for enumerating Bit patterns, plus an additional 
            set-up method that can be used to trade-off memory versus computation. If 
            performance is an issue, users should call ExpandPreComputedTables before 
            calling AllOdd or AllEven.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.BitEnumerators.AllEven(System.Int32)">
            <summary>
            Algorithm to iterate over all bit patterns up to the specified width that have an
            even number of 1's.
            </summary>
            <param name="width">The number of bits in the patterns. Must be less than 31.</param>
            <returns>An enumerated stream of ints, where each value has an even number of 1's.</returns>
            <remarks>This method is NP in runtime, as is the number of return values!</remarks>
        </member>
        <member name="M:CrawfisSoftware.PCG.BitEnumerators.AllOdd(System.Int32)">
            <summary>
            Algorithm to iterate over all bit patterns up to the specified width that have an
            odd number of 1's.
            </summary>
            <param name="width">The number of bits in the patterns. Must be less than 31.</param>
            <returns>An enumerated stream of ints, where each value has an odd number of 1's.</returns>
            <remarks>This method is NP in runtime, as is the number of return values!</remarks>
        </member>
        <member name="M:CrawfisSoftware.PCG.BitEnumerators.ExpandPreComputedTables(System.Int32)">
            <summary>
            Precompute the enumeration for small N.
            </summary>
            <param name="maxTablePatternSize">The size of the precomputed pattern you wish to precompute.
            Due to CLR array size limits, this value is clamped to 28.</param>
            <remarks>This algorithm is 1) NP in run time and 2) NP in memory!</remarks>
        </member>
        <member name="M:CrawfisSoftware.PCG.BitEnumerators.PopCount(System.UInt32)">
            <summary>
            Returns the population count (number of bits set) of a mask.
            Similar in behavior to the x86 instruction POPCNT.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:CrawfisSoftware.PCG.CellularAutomata">
            <summary>
            Framework for creating false/true (0/1) grids.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.CellularAutomata.Width">
            <summary>
            Get the number of columns in the cellular automata
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.CellularAutomata.Height">
            <summary>
            Get the number of rows in the cellular automata
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.CellularAutomata.NeighborhoodSize">
            <summary>
            Get or set the neighborhood radius. Default is one.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.CellularAutomata.AutomataForTrueCells">
            <summary>
            Get or set the function that takes the number of neighbors and
            the number of those that are true (1) and return true or false
            </summary>
            <remarks>Called if the current cell is true.</remarks>
        </member>
        <member name="P:CrawfisSoftware.PCG.CellularAutomata.AutomataForFalseCells">
            <summary>
            Get or set the function that takes the number of neighbors and
            the number of those that are true (1) and return true or false
            </summary>
            <remarks>Called if the current cell is false.</remarks>
        </member>
        <member name="P:CrawfisSoftware.PCG.CellularAutomata.PreIterationFunc">
            <summary>
            Get or set the function called before each iteration
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.CellularAutomata.PostIterationFunc">
            <summary>
            Get or set the function called after each iteration
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.CellularAutomata.#ctor(System.Int32,System.Int32,System.Random)">
            <summary>
            Constructor.
            </summary>
            <param name="width">The number of columns.</param>
            <param name="height">The number of rows.</param>
            <param name="random">A random number generator. If null, a new one will be created.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.CellularAutomata.#ctor(CrawfisSoftware.Collections.Graph.OccupancyGrid,System.Random)">
            <summary>
            Constructor.
            </summary>
            <param name="width">The number of columns.</param>
            <param name="height">The number of rows.</param>
            <param name="random">A random number generator. If null, a new one will be created.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.CellularAutomata.AddTrueNoise(System.Single)">
            <summary>
            Utility function to initialize or add noise.
            </summary>
            <param name="threshold">Values above this threshold will be set to true.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.CellularAutomata.AddFalseNoise(System.Single)">
            <summary>
            Utility function to initialize or add noise.
            </summary>
            <param name="threshold">Values above this threshold will be set to false.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.CellularAutomata.IterateAutomata(System.Int32)">
            <summary>
            Apply the automata rules repeatedly.
            </summary>
            <param name="numberOfIterations">The number of times to apply the automata.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.CellularAutomata.GetOccupanceGrid">
            <summary>
            Return the OccupancyGrid of the cellular automata
            </summary>
            <returns></returns>
        </member>
        <member name="M:CrawfisSoftware.PCG.CellularAutomata.GetNeighborsAndCount(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Count the total number of neighbors under the cell with a box of NeighborhoodSize. Also count the number of those cells that are true.
            </summary>
            <param name="column">The center column.</param>
            <param name="row">The center row.</param>
            <param name="numberTrue">Outputs the number of true values under the kernel.</param>
            <returns>Outputs the total number of cells under the kernel. This will be the kernel size except near boundaries.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws an exception if the filter size or column / row are wrong.</exception>
        </member>
        <member name="M:CrawfisSoftware.PCG.CellularAutomata.ToString">
            <summary>
            Converts the Cellular Automata to an asci string representation
            </summary>
            <returns>A string</returns>
        </member>
        <member name="T:CrawfisSoftware.PCG.CellularAutomataExtended">
            <summary>
            CellularAutomata that allows a Kernel to be passed in. This allows for the 4-neighbors, weights, etc. where the original algorithm is a box filter / counter.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.CellularAutomataExtended.KernelWeights">
            <summary>
            Get or set the kernel weights. These values will be added together for those cells that are true.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.CellularAutomataExtended.ComputeCell">
            <summary>
            The Predicate Function that determines whether to change the cell. It takes in parameters as in the example:
            <c>private static bool AlwaysTrue(int column, int row, int iteration, int numberTrue, int numberOfNeighbors)</c>
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.CellularAutomataExtended.#ctor(CrawfisSoftware.Collections.Graph.OccupancyGrid,System.Random)">
            <summary>
            Constructor.
            </summary>
            <param name="occupancyGrid">An initial state for the cellular automata.</param>
            <param name="random">An optional random number generator.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.CellularAutomataExtended.#ctor(System.Int32,System.Int32,System.Random)">
            <summary>
            Contructor.
            </summary>
            <param name="width">The number of columns for the new occupancy grid.</param>
            <param name="height">The number of rows for the new occupancy grid.</param>
            <param name="random">An optional random number generator.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.CellularAutomataExtended.IterateFiltered(System.Int32)">
            <summary>
            Iterate over the grid the specified number of times, computing the convolution of the kernel with the occupancy grid and calling the ComputeCell function.
            </summary>
            <param name="numberOfIterations">The nunmber of times to apply the decision process for each cell.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.CellularAutomataExtended.GetFilteredValue(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Applies the convolution.
            </summary>
            <param name="column">The center column.</param>
            <param name="row">The center row.</param>
            <param name="numberTrue">Outputs the number of true values under the kernel.</param>
            <param name="totalCells">Outputs the total number of cells under the kernel. This will be the kernel size except near boundaries.</param>
            <returns>The summation of the kernel values where the cells are true.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws an exception if the filter size or column / row are wrong.</exception>
        </member>
        <member name="T:CrawfisSoftware.PCG.DungeonMazeBuilder`2">
            <summary>
            Maze builder that allows for rooms and passages
            </summary>
            <typeparam name="N">The type used for node labels</typeparam>
            <typeparam name="E">The type used for edge weights</typeparam>
        </member>
        <member name="T:CrawfisSoftware.PCG.DungeonMazeBuilder`2.PassageRasterizerType">
            <summary>
            Defined algorithms for connecting two rooms.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.PCG.DungeonMazeBuilder`2.PassageRasterizerType.Unspecified">
            <summary>
            No algorithm selected.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.PCG.DungeonMazeBuilder`2.PassageRasterizerType.Elbow">
            <summary>
            A simple path with one turn.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.PCG.DungeonMazeBuilder`2.PassageRasterizerType.ShortestPathBetweenRooms">
            <summary>
            Determine the shortest path between the rooms using edge weights.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.PCG.DungeonMazeBuilder`2.PassageRasterizerType.ShortestPathUsingExisting">
            <summary>
            Shortest path taking advantage of existing paths.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.PCG.DungeonMazeBuilder`2.PassageRasterizerType.RandomWalk">
            <summary>
            Use a random walk
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.DungeonMazeBuilder`2.NumberOfRooms">
            <summary>
            Get or set the number of rooms to create
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.DungeonMazeBuilder`2.MinRoomSize">
            <summary>
            Get or set the minimum room size to create
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.DungeonMazeBuilder`2.MaxRoomSize">
            <summary>
            Get or set the maximum room size to create
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.DungeonMazeBuilder`2.RoomMoatSize">
            <summary>
            Get or set the outside wall buffer size
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.DungeonMazeBuilder`2.DefaultPassageRasterizer">
            <summary>
            Get or set the algorithm to use when carving a passage with PassageRasterizerType.Unspecified
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.DungeonMazeBuilder`2.MaxNumberOfTrys">
            <summary>
            Get or set the maximum number of attempts to place all rooms
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.DungeonMazeBuilder`2.wallCarveCost">
            <summary>
            Get or set a cost associated with carving a wall
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.DungeonMazeBuilder`2.#ctor(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.GetGridLabel{`0},CrawfisSoftware.Collections.Graph.GetEdgeLabel{`1})">
            <summary>
            Constructor
            </summary>
            <param name="width">The width of the desired maze</param>
            <param name="height">The height of the desired maze</param>
            <param name="nodeAccessor">A function to retrieve any node labels</param>
            <param name="edgeAccessor">A function to retrieve any edge weights</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.DungeonMazeBuilder`2.#ctor(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{`0,`1})">
            <summary>
            Copy Constructor for MazeBuilderAbstract classes.
            </summary>
            <param name="mazeBuilder">Previous MazeBuilderAbstract on which to build upon.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.DungeonMazeBuilder`2.CreateMaze(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.PCG.DungeonMazeBuilder`2.AddRoom(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a room explicitly at the specified location with the specified size.
            </summary>
            <param name="minX">Lower-left x coordinate.</param>
            <param name="minY">Lower-left y coordinate.</param>
            <param name="roomWidth">Width of the room.</param>
            <param name="roomHeight">Height of the room.</param>
            <returns>An id for the room.</returns>
        </member>
        <member name="M:CrawfisSoftware.PCG.DungeonMazeBuilder`2.AddConnection(System.Int32,System.Int32,CrawfisSoftware.PCG.DungeonMazeBuilder{`0,`1}.PassageRasterizerType)">
            <summary>
            Associate a passage between tow rooms
            </summary>
            <param name="room1">The id of the first room.</param>
            <param name="room2">The id of the second room.</param>
            <param name="passageType">A suggestion on how the path should be constructed. The default is Unspecified.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.DungeonMazeBuilder`2.MakeSequentialRoomConnections(CrawfisSoftware.PCG.DungeonMazeBuilder{`0,`1}.PassageRasterizerType)">
            <summary>
            Add passageways between rooms in the order they were generated.
            </summary>
            <param name="passageType">A suggestion on how the path should be constructed. The default is Unspecified.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.DungeonMazeBuilder`2.MakeClosestPathConnections(System.Int32,CrawfisSoftware.PCG.DungeonMazeBuilder{`0,`1}.PassageRasterizerType)">
            <summary>
            Finds the rooms with the closest center points and adds passageways between them.
            </summary>
            <param name="maxNumberOfConnections">The maximum number of room connections to make.</param>
            <param name="passageType">A suggestion on how the path should be constructed. The default is ShortestPathUsingExisting.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.DungeonMazeBuilder`2.ComputePathLengthsFromSource(System.Int32)">
            <summary>
            Precompute all of the path lengths from a certain room.Required for CarveFurthestPassages
            </summary>
            <param name="roomIndex">The room id that the paths to all other rooms should be computed from.</param>
            <remarks>Useful if you have a center room and want to compute paths to all other rooms to determine connections.</remarks>
        </member>
        <member name="M:CrawfisSoftware.PCG.DungeonMazeBuilder`2.CarveAllPassages">
            <summary>
            Actually creates the passages in the underlying grid maze.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.DungeonMazeBuilder`2.CarveAllRooms">
            <summary>
            Using existing path distances, find the furthest paths and carve them.
            </summary>
            <param name="numberOfPathsToCarve">THe number of passageways to create.</param>
            <summary>
            Actually create the rooms in the underlying grid maze.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.DungeonMazeBuilder`2.AddRandomRooms(System.Int32)">
            <summary>
            Create random rooms that do not overlap.
            </summary>
            <param name="numberOfRoomsToAdd"></param>
        </member>
        <member name="T:CrawfisSoftware.PCG.EnumerationUtilities">
            <summary>
            Static class to provide some useful enumeration utilities.
            </summary>
        </member>
        <member name="T:CrawfisSoftware.PCG.EnumerationUtilities.Validator">
            <summary>
            Defines a function that takes in the state of the Path enumeration including a 
            possible new row or vertical bits and returns true if the user wants to allow it, false otherwise.
            This is useful to define constraints on thepath enumeration.
            </summary>
            <param name="pathID">A unique pathID for each path being enumerated.</param>
            <param name="rowIndex">The index of the row currently being enumerated.</param>
            <param name="bitsToValidate">The candiate vertical bits to accept or reject.</param>
            <param name="verticalBitsGrid">The state of the vertical paths up to this row index.</param>
            <param name="horizontalBitsGrid">The state of the horizontal paths up to this row index.</param>
            <param name="componentsGrid">The state of the components up to this row index.</param>
            <returns>True if this row should be included in the enumeration. False otherwise.</returns>
        </member>
        <member name="M:CrawfisSoftware.PCG.EnumerationUtilities.ValidateAndUpdateComponents(System.Int32,System.Int32,System.Collections.Generic.IList{System.Collections.Generic.IList{System.Int32}},System.Int32,System.Int32@,System.Int32)">
            <summary>
            Checks two rows to see if they are valid. If so, components from the first row are matched (or merged) and
            new component numbers are created (as well as new loops). 
            </summary>
            <param name="inFlows">Incoming row of vertical edges</param>
            <param name="outFlows">Outgoing row of vertical edges</param>
            <param name="componentsGrid">The verticalGrid of component numbers for each inflow edge on each row</param>
            <param name="index">The current row index</param>
            <param name="horizontalSpans">A bit vector of new horizontal edges created by the component matching,
            merging and creation</param>
            <param name="maxNestedComponents">A constraint to check on the maximum allowed nested loops for this row.</param>
            <returns>True is the outFlows row is a valid row based on the inFlows row.</returns>
        </member>
        <member name="M:CrawfisSoftware.PCG.EnumerationUtilities.TrimToSpan(System.Int32,System.Int32,System.Int32)">
            <summary>
            Trim the bit pattern to the span between start and end (inclusive)
            </summary>
            <param name="bitPattern"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:CrawfisSoftware.PCG.EnumerationUtilities.CountSetBits(System.Int32)">
            <summary>
            Count the number of set bits in the bit pattern
            </summary>
            <param name="n">Base 10 representation of bits</param>
            <returns></returns>
        </member>
        <member name="M:CrawfisSoftware.PCG.EnumerationUtilities.RandomOddBitPattern(System.Int32,System.Random,System.Int32)">
            <summary>
            Generate a random bit pattern with an odd number of set bits under given width
            </summary>
            <param name="width">Maximum number of digits permitted in a bit pattern</param>
            <param name="random">Random number generator </param>
            <param name="setBit">Pre-set bit in the bit pattern</param>
            <returns></returns>
        </member>
        <member name="M:CrawfisSoftware.PCG.EnumerationUtilities.RandomEvenBitPattern(System.Int32,System.Random,System.Int32)">
            <summary>
            Generate a random bit pattern with an even number of set bits under given width
            </summary>
            <param name="width">Maximum number of digits permitted in a bit pattern</param>
            <param name="random">Random number generator </param>
            <param name="setBit">Pre-set bit in the bit pattern</param>
            <returns></returns>
        </member>
        <member name="M:CrawfisSoftware.PCG.EnumerationUtilities.RandomBitPattern(System.Int32,System.Random,System.Int32,System.Int32)">
            <summary>
            Generate a random bit pattern with an given number of set bits under given width
            </summary>
            <param name="width">Maximum number of digits permitted in a bit pattern</param>
            <param name="random">Random number generator </param>
            <param name="numOfSetBit">Random number generator </param>
            <param name="setBit">Pre-set bit in the bit pattern</param>
            <returns></returns>
        </member>
        <member name="M:CrawfisSoftware.PCG.EnumerationUtilities.NumberOfDistinctValues(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Counts the number of distinct numbers in the List.
            </summary>
            <param name="list">An IEnumerable of int's</param>
            <returns>The number of distinct values within the list.</returns>
        </member>
        <member name="T:CrawfisSoftware.PCG.LoopGeneratorSideWinder`2">
            <summary>
            Generate a random loop on a grid that consists of two paths that merge at
            the bottom row and top row.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.LoopGeneratorSideWinder`2.MaxSpanWidth">
            <summary>
            Get or set the maximum horizontal passage length used in the default
            PickNextColumn function.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.LoopGeneratorSideWinder`2.MinVerticalSpan">
            <summary>
            Get or set the number of rows that should be vertical spans before any turns. This is used in the default
            PickNextColumn function.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.LoopGeneratorSideWinder`2.MinLeftToRightSpacing">
            <summary>
            Get or set the number of rows that should be vertical spans before any turns. This is used in the default
            PickNextColumn function.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.LoopGeneratorSideWinder`2.PickNextColumns">
            <summary>
            Get or set the a function to determine on a per row basis the exact column
            the curve should shift over to. Defaults to a random column to the left or
            right of the previous column at most MaxSpanWidth away.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.LoopGeneratorSideWinder`2.IgnoreStartAndEnd">
            <summary>
            Get or set whether to ignore the start and end cells when generating the maze.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.LoopGeneratorSideWinder`2.ResetStartAndEnd">
            <summary>
            Get or set whether to reset the start to the leftmost cell in the loop on the bottom row and the rightmost cell on the top row that are within the loop.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.LoopGeneratorSideWinder`2.#ctor(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{`0,`1},System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="mazeBuilder">MazeBuilderAbstract to use.</param>
            <param name="ignoreStartEnd">Boolean indicating whether to ignore the start and end cells when generating the maze.</param>
            <param name="resetStartEnd">Boolean indicating whether to reset the start to the leftmost cell in the loop on the bottom row and 
            the end to the rightmost cell on the top row.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.LoopGeneratorSideWinder`2.CreateMaze(System.Boolean)">
            <summary>
            Create a maze using the Sidewinder algorithm
            </summary>
            <param name="preserveExistingCells">Boolean indicating whether to only replace maze cells that are undefined.
            Default is false.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.LoopSamplerBottomToTop.#ctor(System.Int32,System.Int32,System.Random,System.Func{System.Int32,System.Boolean},CrawfisSoftware.PCG.EnumerationUtilities.Validator,CrawfisSoftware.PCG.EnumerationUtilities.Validator)">
            <summary>
            
            </summary>
            <param name="width">The width of the underlying verticalGrid.</param>
            <param name="height">The height of the underlying verticalGrid</param>
            <param name="random">Random number generator</param>
            <param name="globalConstraintsOracle">Optional function to specify some global constraints on the outflows of a row.</param>
            <param name="verticalCandidateOracle">Function that returns true or false whether this row is desired. Parameters are: the pathID, the row number,
            the current candidate row value (vertical bits), all verticalBits so far, all horizontal bits so far, all components so far</param>
            <param name="horizontalCandidateOracle">Function that returns true or false whether this row is desired. Parameters are: the pathID, the row number,
            the current candidate value (horizontal bits), all verticalBits so far, all horizontal bits so far, all components so far.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.LoopSamplerBottomToTop.Sample">
            <summary>
            Iterate over all non-cyclical paths from a starting cell to an ending cell on an open verticalGrid.
            </summary>
            <param name="start">The column index of the starting cell on the first row (row 0).</param>
            <param name="end">The column index of the ending cell on the last row (row height-1)</param>
            <returns>A value tuple of a list of vertical bits and a list of horizontal bits.</returns>
        </member>
        <member name="T:CrawfisSoftware.PCG.MazeWrapperFromBinary2DArray">
            <summary>
            Static class used to carve a path
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.MazeWrapperFromBinary2DArray.CarveOpenings(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{System.Int32,System.Int32},System.Boolean[0:,0:])">
            <summary>
            Carve openings based on the list of compressed vertical and horizontal edge flags for each row
            </summary>
            <param name="mazeBuilder">An existing maze builder to use in the carving process</param>
            <param name="solidBlocks">2D array matching the maze builder's width and height.
            A value of true implies this cell is a solid block. Passages will be carved from non-solid
            blocks to adjacent non-solid blocks.</param>
        </member>
        <member name="T:CrawfisSoftware.PCG.MazeWrapperFromGridBitArrays`2">
            <summary>
            Static class used to carve a path
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.MazeWrapperFromGridBitArrays`2.CarvePath(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{`0,`1},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Carve openings based on the list of compressed vertical and horizontal edge flags for each row
            </summary>
            <param name="mazeBuilder">An existing maze builder to use in the carving process</param>
            <param name="verticalPaths">A list of rows, where each row has a bitpattern. 1's in the bit pattern 
            indicate a passage should be carved to the next row (i,j)->(i,j+1). Bits are read right to left as the grid goes left to right.</param>
            <param name="horizontalPaths">A list of rows, where each row has a bitpattern. 1's in the bit pattern 
            indicate a passage should be carved to the next cell (i,j)->(i+1,j). Bits are read right to left as the grid goes left to right.</param>
        </member>
        <member name="T:CrawfisSoftware.PCG.OutflowState">
            <summary>
            Enum of possible directions an inflow can go.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.OutflowStates.OldDetermineOutflowStates(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            This method will eliminate invalid states between two inflows based on positions and
            components. All possible combinations can then be tried for each span
            So there would be 3^N possible state cases. 
            </summary>
            <param name="positions">The positions of the inflows.</param>
            <param name="components">The component numbers of the inflows (after any merges).</param>
            <returns>A vector of states flags.</returns>
            <remarks>The case of a single space between two inflows is not handled here. So the
            set of possibilities may be slightly less if positions[i]+2 == positions[i+1]
            as the combination go right (for i) and go left (for i+1) is invalid. This is handled in
            the span enumeration once we fix a state for inflow i.</remarks>
        </member>
        <member name="M:CrawfisSoftware.PCG.OutflowStates.DetermineOutflowStates(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Enumerate all rows that have the desired inflows and outflow states (left, up, right). All merges
            are marked with states dead-goes-right and dead-goes-left.
            </summary>
            <param name="width">The width of the row.</param>
            <param name="positions">The positions of the inflows.</param>
            <param name="components">List of component numbers for each position.</param>
            <returns>An Enumerable of the valid row directions for each inflow position.</returns>
        </member>
        <member name="M:CrawfisSoftware.PCG.OutflowStates.DetermineOutflowStates(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Enumerate all rows that have the desired inflows and outflow states (left, up, right). All merges
            are marked with states dead-goes-right and dead-goes-left.
            </summary>
            <param name="width">The width of the row.</param>
            <param name="positions">The positions of the inflows.</param>
            <returns>An Enumerable of the valid row directions for each inflow position.</returns>
        </member>
        <member name="T:CrawfisSoftware.PCG.PathEnumerationBottomToTop">
            <summary>
            Static class to enumerate paths
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.PathEnumerationBottomToTop.AllPaths(System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Boolean},CrawfisSoftware.PCG.EnumerationUtilities.Validator,CrawfisSoftware.PCG.EnumerationUtilities.Validator)">
            <summary>
            Iterate over all non-cyclical paths from a starting cell to an ending cell on an open verticalGrid.
            </summary>
            <param name="width">The width of the underlying verticalGrid.</param>
            <param name="height">The height of the underlying verticalGrid</param>
            <param name="start">The column index of the starting cell on the first row (row 0).</param>
            <param name="end">The column index of the ending cell on the last row (row height-1)</param>
            <param name="globalConstraintsOracle">Optional function to specify some global constraints on the outflows of a row.</param>
            <param name="rowCandidateOracle">Function that returns true or false whether this row is desired. Parameters are: the pathID, the row number,
            the current candidate row value (vertical bits), all verticalBits so far, all horizontal bits so far, all components so far.</param>
            <param name="horizontalCandidateOracle">Function that returns true or false whether this row is desired. Parameters are: the pathID, the row number,
            the current candidate value (horizontal bits), all verticalBits so far, all horizontal bits so far, all components so far.</param>
            <returns>A value tuple of a list of vertical bits and a list of horizontal bits.</returns>
        </member>
        <member name="T:CrawfisSoftware.PCG.PathGenerator">
            <summary>
            Create a path using the Path enumerator logic
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.PathGenerator.#ctor(System.Int32,System.Int32,System.Random)">
            <summary>
            Constructor
            </summary>
            <param name="width">The width of the underlying grid</param>
            <param name="height">The height of the underlying grid</param>
            <param name="random">A random number generator</param>
            <remarks>Width must be less than 32.</remarks>
        </member>
        <member name="M:CrawfisSoftware.PCG.PathGenerator.GenerateRandomPath(System.Int32,System.Int32,System.Collections.Generic.IList{System.Int32}@,System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            Generate a random path from the bottom edge to the top edge
            </summary>
            <param name="start">The column index of the starting cell</param>
            <param name="end">The column index of the ending cell</param>
            <param name="verticalPaths">A bit pattern of each row that represents the vertical edges of the path</param>
            <param name="horizontalPaths">A bit pattern of each row that represents the horizontal edges of the path</param>
        </member>
        <member name="T:CrawfisSoftware.PCG.PathGeneratorSideWinder`2">
            <summary>
            Generate a path from the start column on the bottom row to the end column
            on the top row.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.PathGeneratorSideWinder`2.MaxSpanWidth">
            <summary>
            Get or set the maximum horizontal passage length used in the default
            PickNextColumn function.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.PathGeneratorSideWinder`2.PickNextColumn">
            <summary>
            Get or set the a function to determine on a per row basis the exact column
            the curve should shift over to. Defaults to a random column to the left or
            right of the previous column at most MaxSpanWidth away.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.PathGeneratorSideWinder`2.PickNextRow">
            <summary>
            Get or set the a function to determine on a per row basis the exact row
            the curve should move to after the span for that row is completed. Defaults
            to the next row (returns row+1).
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.PathGeneratorSideWinder`2.#ctor(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.GetGridLabel{`0},CrawfisSoftware.Collections.Graph.GetEdgeLabel{`1})">
            <summary>
            Constructor
            </summary>
            <param name="width">The width of the desired maze</param>
            <param name="height">The height of the desired maze</param>
            <param name="nodeAccessor">A function to retrieve any node labels</param>
            <param name="edgeAccessor">A function to retrieve any edge weights</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.PathGeneratorSideWinder`2.#ctor(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{`0,`1})">
            <summary>
            Constructor. Takes an existing maze builder (derived from MazeBuilderAbstract) and copies the state over.
            </summary>
            <param name="mazeBuilder">Previous MazeBuilderAbstract on which to build upon.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.PathGeneratorSideWinder`2.CreateMaze(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:CrawfisSoftware.PCG.PathSamplerBottomToTop">
            <summary>
            Class to sample a path from top to bottom.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.PathSamplerBottomToTop.#ctor(System.Int32,System.Int32,System.Random,System.Func{System.Int32,System.Boolean},CrawfisSoftware.PCG.EnumerationUtilities.Validator,CrawfisSoftware.PCG.EnumerationUtilities.Validator)">
            <summary>
            
            </summary>
            <param name="width">The width of the underlying verticalGrid.</param>
            <param name="height">The height of the underlying verticalGrid</param>
            <param name="random">Random number generator</param>
            <param name="globalConstraintsOracle">Optional function to specify some global constraints on the outflows of a row.</param>
            <param name="verticalCandidateOracle">Function that returns true or false whether this row is desired. Parameters are: the pathID, the row number,
            the current candidate row value (vertical bits), all verticalBits so far, all horizontal bits so far, all components so far</param>
            <param name="horizontalCandidateOracle">Function that returns true or false whether this row is desired. Parameters are: the pathID, the row number,
            the current candidate value (horizontal bits), all verticalBits so far, all horizontal bits so far, all components so far.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.PathSamplerBottomToTop.Sample(System.Int32,System.Int32)">
            <summary>
            Iterate over all non-cyclical paths from a starting cell to an ending cell on an open verticalGrid.
            </summary>
            <param name="start">The column index of the starting cell on the first row (row 0).</param>
            <param name="end">The column index of the ending cell on the last row (row height-1)</param>
            <returns>A value tuple of a list of vertical bits and a list of horizontal bits.</returns>
        </member>
        <member name="T:CrawfisSoftware.PCG.RandomWalkMazeBuilder`2">
            <summary>
            Graph builder using the Drunken Walk or Random Walk algorithm with multiple walkers.
            </summary>
            <typeparam name="N">The type used for node labels</typeparam>
            <typeparam name="E">The type used for edge weights</typeparam>
        </member>
        <member name="P:CrawfisSoftware.PCG.RandomWalkMazeBuilder`2.PercentToCarve">
            <summary>
            The main control parameter for the algorithm. Specifies new passages to open (carve).
            A value of zero provides no carving.
            A value of 1.0 will carve the entire grid.
            Note: If carving a partial maze already, this parameter is for any new carvings.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.RandomWalkMazeBuilder`2.MaxWalkingDistance">
            <summary>
            A safety parameter or a useful control parameter. The algorithm stops after
            MazWalkingDistance steps.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.RandomWalkMazeBuilder`2.NumberOfWalkers">
            <summary>
            The number of walkers to spawn (eventually). New walkers can be spawned
            at random locations during initialization or at an existing walker's
            location as the algorithm progresses. The later will carve out more open areas.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.RandomWalkMazeBuilder`2.InitialNumberOfWalkers">
            <summary>
            The number of initial walkers to spawn. Each walker will start at a random location.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.PCG.RandomWalkMazeBuilder`2.favorForwardCarving">
            <summary>
            If favorForwardCarving is true. A walker is more likely to walk in a straight line.
            This moves the walker further around the room. Setting to false provides less
            exploration of the grid and carves out a more open area.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.RandomWalkMazeBuilder`2.#ctor(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.GetGridLabel{`0},CrawfisSoftware.Collections.Graph.GetEdgeLabel{`1})">
            <summary>
            Constructor. All of the parameters are the same as the grid data type.
            </summary>
            <param name="width">Number of nodes in the horizontal direction.</param>
            <param name="height">Number of nodes in the vertical direction.</param>
            <param name="nodeAccessor">A GetGridLabel delegate instance used to determine
            a node's label when queried.</param>
            <param name="edgeAccessor">A GetEdgeLabel delegate instance used to determine
            a edge's label when queried.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.RandomWalkMazeBuilder`2.#ctor(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{`0,`1})">
            <summary>
            Constructor, Takes an existing maze builder (derived from MazeBuilderAbstract) and copies the state over.
            </summary>
            <param name="mazeBuilder">A maze builder</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.RandomWalkMazeBuilder`2.CreateMaze(System.Boolean)">
            <summary>
            Main method where the algorithm is performed.
            Note: This could be called many times with all but the 
            first passing in a value of true. New walkers would be
            spawned on each invocation.
            </summary>
            <param name="preserveExistingCells">If true, _occupied with existing
            values already set will not be affected.</param>
        </member>
        <member name="T:CrawfisSoftware.PCG.SpanEnumeration">
            <summary>
            Enumerate all valid path (or loop) fragments, given the desired outflow state of the
            last bit and the outflow start of the previous span (the start bit location).
            </summary>
            <remarks>Bit order for a span goes from right to left. N...0</remarks>
        </member>
        <member name="M:CrawfisSoftware.PCG.SpanEnumeration.#ctor(System.Int32,CrawfisSoftware.PCG.OutflowState,System.Int32,CrawfisSoftware.PCG.OutflowState)">
            <summary>
            Constructor.
            </summary>
            <param name="start">The starting bit location (not included in the span).</param>
            <param name="startState">The OutflowState state of the start location (or previous span).</param>
            <param name="end">The ending bit location.</param>
            <param name="endState">The end bit's OutflowState.</param>
        </member>
        <member name="M:CrawfisSoftware.PCG.SpanEnumeration.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:CrawfisSoftware.PCG.ValidPathRowEnumerator">
            <summary>
            Static class used to enumerate rows with an inFlow constraint.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.ValidPathRowEnumerator.PointToOddTable">
            <summary>
            Point the pre-computed tables to odd tables.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.ValidPathRowEnumerator.PointToEvenTable">
            <summary>
            Point the pre-computed tables to even tables.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.PCG.ValidPathRowEnumerator.ValidRowList(System.Int32,System.Int32)">
            <summary>
            Get the valid vertical outputs given a vertical input.
            </summary>
            <param name="width">The width of the row</param>
            <param name="row">The inflow bits.</param>
            <returns>A list of possible outputs.</returns>
        </member>
        <member name="M:CrawfisSoftware.PCG.ValidPathRowEnumerator.OddRowList(System.Int32,System.Int32)">
            <summary>
            Get the valid vertical outputs given a vertical input. Valid outputs must have an odd number of bits.
            </summary>
            <param name="width">The width of the row</param>
            <param name="row">The inflow bits.</param>
            <returns>A list of possible outputs.</returns>
        </member>
        <member name="M:CrawfisSoftware.PCG.ValidPathRowEnumerator.EvenRowList(System.Int32,System.Int32)">
            <summary>
            Get the valid vertical outputs given a vertical input. Valid outputs must have an even number of bits.
            </summary>
            <param name="width">The width of the row</param>
            <param name="row">The inflow bits.</param>
            <returns>A list of possible outputs.</returns>
        </member>
        <member name="M:CrawfisSoftware.PCG.ValidPathRowEnumerator.BuildOddTables(System.Int32)">
            <summary>
            Create pre-computed tables for paths, which have an odd number of inflows.
            </summary>
            <param name="width">The width of the row, cannot exceed 16.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> is less than or equal to <c>16</c>.
            </exception>
        </member>
        <member name="M:CrawfisSoftware.PCG.ValidPathRowEnumerator.BuildEvenTables(System.Int32)">
            <summary>
            Create pre-computed tables for loops, which have an even number of inflows.
            </summary>
            <param name="width">The width of the row</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> is less than or equal to <c>16</c>.
            </exception>
        </member>
        <member name="M:CrawfisSoftware.PCG.ValidPathRowEnumerator.BuildOddTablesWithConstraints(System.Int32,System.Func{System.Int32,System.Boolean})">
            <summary>
            Create pre-computed tables for paths, which have an odd number of inflows.
            </summary>
            <param name="width">The width of the row</param>
            <param name="oracle">Function that returns true if this outflow configuration is desirable.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> is less than or equal to <c>16</c>.
            </exception>
        </member>
        <member name="M:CrawfisSoftware.PCG.ValidPathRowEnumerator.BuildEvenTablesWithConstraints(System.Int32,System.Func{System.Int32,System.Boolean})">
            <summary>
            Create pre-computed tables for loops or paths which do not have a start and end on opposite grid edges, which have an even number of inflows.
            </summary>
            <param name="width">The width of the row</param>
            <param name="oracle">Function that returns true if this outflow configuration is desirable.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> is less than or equal to <c>16</c>.
            </exception>
        </member>
        <member name="M:CrawfisSoftware.PCG.ValidPathRowEnumerator.GetRandomRow(System.Int32,System.Int32,System.Random)">
            <summary>
            Get a random row that is a valid result with the given inflows.
            </summary>
            <param name="width">The width of the row</param>
            <param name="inFlows">A bit pattern of the inflows in the row</param>
            <param name="random">A random number generator</param>
            <returns></returns>
        </member>
        <member name="M:CrawfisSoftware.PCG.ValidPathRowEnumerator.ValidRows(System.Int32,System.Int32,CrawfisSoftware.PCG.OutflowState,CrawfisSoftware.PCG.OutflowState)">
            <summary>
            Iterate over all valid rows given a row's inflows
            </summary>
            <param name="width">The width of the row</param>
            <param name="inFlows">A bit pattern of the inflows in the row</param>
            <param name="leftEdgeState">The Outflow state of the first outflow.</param>
            <param name="rightEdgeState">The outflow state for the last outflow.</param>
            <returns>An enumerable of integers that represent the state of the row.</returns>
        </member>
        <member name="M:CrawfisSoftware.PCG.ValidPathRowEnumerator.InflowsFromBits(System.Int32,System.Int32)">
            <summary>
            Returns the column indices of the inflows of a row
            </summary>
            <param name="width">The width of the row</param>
            <param name="row">The inflow bit pattern</param>
            <returns></returns>
        </member>
    </members>
</doc>
