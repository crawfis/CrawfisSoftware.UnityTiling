<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CrawfisSoftware.Maze</name>
    </assembly>
    <members>
        <member name="T:CrawfisSoftware.Collections.Maze.IMazeBuilder`2">
            <summary>
            Interface for creating mazes.
            </summary>
            <typeparam name="N">The type used for node labels</typeparam>
            <typeparam name="E">The type used for edge weights</typeparam>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.StartCell">
            <summary>
            The starting cell index for the maze. Cell indices go from bottom-left across a row to top-right.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.EndCell">
            <summary>
            The end cell index for the maze. Cell indices go from bottom-left across a row to top-right.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.RandomGenerator">
            <summary>
            Get or set the random number generator that concrete maze builders may use.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.CarvePassage(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Add an edge from <paramref name="currentCell"/> to <paramref name="targetCell"/> and vice versa.
            </summary>
            <param name="currentCell">A cell index</param>
            <param name="targetCell">A cell index</param>
            <param name="preserveExistingCells">Boolean indicating whether to only replace maze cells that are undefined.
            Default is false.</param>
            <returns>Returns true if the operation was successful.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.AddWall(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Remove any edge from <paramref name="currentCell"/> to <paramref name="targetCell"/> and vice versa.
            </summary>
            <param name="currentCell">A cell index</param>
            <param name="targetCell">A cell index</param>
            <param name="preserveExistingCells">Boolean indicating whether to only replace maze cells that are undefined.
            Default is false.</param>
            <returns>Returns true if the operation was successful.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.BlockRegion(System.Int32,System.Int32)">
            <summary>
            Delete all edges in the specified rectangle.
            </summary>
            <param name="lowerLeftCell">The cell index of the lower-left corner of a rectangular region</param>
            <param name="upperRightCell">The cell index of the upper-right corner of a rectangular region</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.OpenRegion(System.Int32,System.Int32)">
            <summary>
            Add all edges to neighbors within the specified rectangle.
            </summary>
            <param name="lowerLeftCell">The cell index of the lower-left corner of a rectangular region</param>
            <param name="upperRightCell">The cell index of the upper-right corner of a rectangular region</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.CreateMaze(System.Boolean)">
            <summary>
            Build the maze based on the maze builder configuration
            </summary>
            <param name="preserveExistingCells">Boolean indicating whether to only replace maze cells that are undefined.
            Default is false.</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.GetMaze">
            <summary>
            Get the current maze
            </summary>
            <returns>A maze</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.AddWall(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Block the directions going to and from the cells
            </summary>
            <param name="currentColumn">A column index</param>
            <param name="currentRow">A row index</param>
            <param name="selectedColumn">Neighboring column index</param>
            <param name="selectedRow">Neighboring row index</param>
            <param name="preserveExistingCells">Boolean indicating whether to only replace maze cells that are undefined.
            Default is false.</param>
            <returns></returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.CarveDirectionally(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.Direction,System.Boolean)">
            <summary>
            Carve a passage in the specified direction.
            </summary>
            <param name="currentColumn">Column index of the cell to carve</param>
            <param name="currentRow">Row index of the row to carve</param>
            <param name="directionToCarve">A single direction to carve</param>
            <param name="preserveExistingCells">Boolean indicating whether to only replace maze cells that are undefined.
            Default is false.</param>
            <return>Returns true if the operation was successful.</return>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.FillRegion(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.Direction)">
            <summary>
            Set all cells with the directions specified.
            </summary>
            <param name="lowerLeftCell">The lower-left corner of the region to fix.</param>
            <param name="upperRightCell">The upper-right corner of the region to fix.</param>
            <param name="dirs">List of directions to set each cell to.</param>
            <remarks>May lead to possible inconsistent neighbor directions.</remarks>
            <seealso>MakeBidirectionallyConsistent</seealso>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.Clear">
            <summary>
            Set all directions in the maze to Direction.Undefined
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.RemoveDeadEnds(System.Boolean)">
            <summary>
            Remove dead-ends (implementation specific - one pass or many passes).
            Replaces dead-ends by blocking the only passage creating an empty cell
            </summary>
            <param name="preserveExistingCells"></param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.FreezeDefinedCells">
            <summary>
            Remove Direction.Undefined for all cells that have been defined
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.RemoveUndefines">
            <summary>
            Remove Direction.Undefined for all cells.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.MakeBidirectionallyConsistent(System.Boolean)">
            <summary>
            Ensures that all edges are bi-directional. In other words, a passage was not carved from A to
            B and not B to A.
            <paramref name="carvingMissingPassages">If true, fix inconsistencies by opening up both sides. If false, wall up  both sides.</paramref>
            </summary>
            <remarks>This will open up all inconsistencies.</remarks>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.CarvePassage(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Carve a passage in the specified direction.
            </summary>
            <param name="currentColumn">A column index</param>
            <param name="currentRow">A row index</param>
            <param name="selectedColumn">Neighboring column index</param>
            <param name="selectedRow">Neighboring row index</param>
            <param name="preserveExistingCells">Boolean indicating whether to only replace maze cells that are undefined.
            Default is false.</param>
            <return>Returns true if the operation was successful.</return>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.CarveHorizontalSpan(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Carve a continuous horizontal passage.
            </summary>
            <param name="row">The row to carve</param>
            <param name="column1">The start (or end) of the passage.</param>
            <param name="column2">The end (or start) of the passage.</param>
            <param name="preserveExistingCells">Boolean indicating whether to only replace maze cells that are undefined.
            Default is false.</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.CarveVerticalSpan(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Carve a continuous vertical passage.
            </summary>
            <param name="column">The column to carve</param>
            <param name="row1">The start (or end) of the passage.</param>
            <param name="row2">The end (or start) of the passage.</param>
            <param name="preserveExistingCells">Boolean indicating whether to only replace maze cells that are undefined.
            Default is false.</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.SetCell(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.Direction)">
            <summary>
            Set the directions for this cell w/o any safeguards
            </summary>
            <param name="i">The column index</param>
            <param name="j">The row index</param>
            <param name="dirs">The cell value including all directions</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.AddDirectionExplicitly(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.Direction)">
            <summary>
            Add the direction(s) to this cell w/o any safeguards
            </summary>
            <param name="i">The column index</param>
            <param name="j">The row index</param>
            <param name="dirs">The directions to add</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.MakeBidirectionallyConsistent(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Ensures that all edges are bi-directional. In other words, a passage was not carved from A to
            B and not B to A.
            </summary>
            <param name="lowerLeftCell">The lower-left corner of the region to fix.</param>
            <param name="upperRightCell">The upper-right corner of the region to fix.</param>
            <param name="carvingMissingPassages">If true, fix inconsistencies by opening up both sides. If false, wall up  both sides.</param>
            <remarks>This will open up all inconsistencies.</remarks>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.IMazeBuilder`2.MakeBidirectionallyConsistent(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loops over the specified region and removes the Direction.Undefined if any.
            </summary>
            <param name="currentColumn">Lower-left column</param>
            <param name="currentRow">Lower-left row</param>
            <param name="endColumn">upper-left column inclusive</param>
            <param name="endRow">upper-right row inclusive</param>
            <param name="carvingMissingPassages">If true, fix inconsistencies by opening up both sides. If false, wall up  both sides.</param>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.Maze`2">
            <summary>
            A grid with some edges blocked and others open
            </summary>
            <typeparam name="N">The type used for node labels</typeparam>
            <typeparam name="E">The type used for edge weights</typeparam>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.Maze`2.Width">
            <value>
            Get the width in the number of grid cells
            </value>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.Maze`2.Height">
            <value>
            Get the height in the number of grid cells
            </value>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.Maze`2.StartCell">
            <summary>
            The starting cell index for the maze. Cell indices go from bottom-left across a row to top-right.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.Maze`2.EndCell">
            <summary>
            The end cell index for the maze. Cell indices go from bottom-left across a row to top-right.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.Maze`2.#ctor(CrawfisSoftware.Collections.Graph.Grid{`0,`1},CrawfisSoftware.Collections.Graph.Direction[0:,0:],System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="grid">A grid to use as the basic structure of the maze</param>
            <param name="directions">A 2D array of Direction flags that specify the maze.</param>
            <param name="startCellIndex">The starting cell index for the maze. Cell indices go from 
            bottom-left across a row to top-right.</param>
            <param name="endCellIndex">The ending cell index for the maze. Cell indices go from 
            bottom-left across a row to top-right.</param>
            <remarks>Made access internal to prevent changes to the directions array.</remarks>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.Maze`2.GetDirection(System.Int32,System.Int32)">
            <summary>
            Get the set of opening directions in the current cell
            </summary>
            <param name="column">The i index of the cell</param>
            <param name="row">The j index of the cell</param>
            <returns>A set of Direction flags</returns>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.Maze`2.NumberOfEdges">
            <inheritdoc/>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.Maze`2.NumberOfNodes">
            <inheritdoc/>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.Maze`2.Nodes">
            <inheritdoc/>
            <remarks>If the node for a maze has no directions specified it is not output.</remarks>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.Maze`2.Edges">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.Maze`2.GetNodeLabel(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.Maze`2.Neighbors(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.Maze`2.OutEdges(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.Maze`2.Parents(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.Maze`2.InEdges(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.Maze`2.ContainsEdge(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.Maze`2.GetEdgeLabel(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.Maze`2.TryGetEdgeLabel(System.Int32,System.Int32,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.Maze`2.Transpose">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.Maze`2.ToString">
            <summary>
            Converts the maze to an asci string representation
            </summary>
            <returns>A string</returns>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2">
            <summary>
            Abstract base class to build mazes with some concrete implementations
            </summary>
            <typeparam name="N">The type used for node labels</typeparam>
            <typeparam name="E">The type used for edge weights</typeparam>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.StartCell">
            <inheritdoc/>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.EndCell">
            <inheritdoc/>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.RandomGenerator">
            <inheritdoc/>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.Width">
            <inheritdoc/>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.Height">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.#ctor(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.GetGridLabel{`0},CrawfisSoftware.Collections.Graph.GetEdgeLabel{`1})">
            <summary>
            Constructor
            </summary>
            <param name="width">The width of the desired maze</param>
            <param name="height">The height of the desired maze</param>
            <param name="nodeAccessor">A function to retrieve any node labels</param>
            <param name="edgeAccessor">A function to retrieve any edge weights</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.#ctor(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{`0,`1})">
            <summary>
            Copy Constructor (shallow copy)
            </summary>
            <param name="mazeBuilder">An existing maze builder to copy the current state from.</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.GetDirection(System.Int32,System.Int32)">
            <summary>
            Get the direction for the specified cell.
            </summary>
            <param name="column">The column index of the cell.</param>
            <param name="row">The row index of the cell.</param>
            <returns>The Direction flags.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.CarveDirectionally(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.Direction,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.CarvePassage(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.CarvePassage(System.Int32,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.AddWall(System.Int32,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.AddWall(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.BlockRegion(System.Int32,System.Int32)">
            <summary>
            Remove all directions in the specified region.
            </summary>
            <param name="lowerLeftCell">The lower-left corner of the region to fix.</param>
            <param name="upperRightCell">The upper-right corner of the region to fix.</param>
            <remarks>May lead to possible inconsistent neighbor directions.</remarks>
            <seealso>MakeBidirectionallyConsistent</seealso>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.OpenRegion(System.Int32,System.Int32)">
            <summary>
            Add passages to all neighbors within the specified region
            </summary>
            <param name="lowerLeftCell">The lower-left corner of the region to fix.</param>
            <param name="upperRightCell">The upper-right corner of the region to fix.</param>
            <remarks>May lead to possible inconsistent neighbor directions.</remarks>
            <seealso>MakeBidirectionallyConsistent</seealso>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.FillRegion(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.Direction)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.WallBoundary(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Add walls (inconsistently currently) to the boundary of the define rectangle.
            </summary>
            <param name="lowerLeftCell">The lower-left cell index.</param>
            <param name="upperRightCell">The upper -right cell index.</param>
            <param name="preserveExistingCells">Boolean indicating whether to only replace maze cells that are undefined.
            Default is false.</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.RemoveDeadEnds(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.RemoveUndefines">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.FreezeDefinedCells">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.MakeBidirectionallyConsistent(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.MakeBidirectionallyConsistent(System.Int32,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.MakeBidirectionallyConsistent(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.InvertDirections">
            <summary>
            Invert all of the directions, keeping Undefine's unchanged.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.CreateMaze(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.GetMaze">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.CarveHorizontalSpan(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.CarveVerticalSpan(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.SetCell(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.Direction)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.AddDirectionExplicitly(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.Direction)">
            <inheritdoc/>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.grid">
            <summary>
            The underlying grid data structure
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.nodeFunction">
            <summary>
            A function used to look up node labels
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.edgeFunction">
            <summary>
            A function used to look up edge weights
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeBuilderAbstract`2.directions">
            <summary>
            A 2D array storing the structure of the maze as a 2D array of directions
            </summary>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeBuilderAldousBroder`2">
            <summary>
            Create a maze using the Aldous Broder algorithm
            </summary>
            <typeparam name="N">The type used for node labels</typeparam>
            <typeparam name="E">The type used for edge weights</typeparam>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAldousBroder`2.#ctor(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.GetGridLabel{`0},CrawfisSoftware.Collections.Graph.GetEdgeLabel{`1})">
            <summary>
            Constructor
            </summary>
            <param name="width">The width of the desired maze</param>
            <param name="height">The height of the desired maze</param>
            <param name="nodeAccessor">A function to retrieve any node labels</param>
            <param name="edgeAccessor">A function to retrieve any edge weights</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAldousBroder`2.#ctor(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{`0,`1})">
            <summary>
            Constructor, Takes an existing maze builder (derived from MazeBuilderAbstract) and copies the state over.
            </summary>
            <param name="mazeBuilder">A maze builder</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderAldousBroder`2.CreateMaze(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeBuilderBinaryTree`2">
            <summary>
            Create a maze using the Binary Tree algorithm
            </summary>
            <typeparam name="N"></typeparam>
            <typeparam name="E"></typeparam>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.MazeBuilderBinaryTree`2.PercentHorizontal">
            <summary>
            Control to favor horizontal or vertical runs
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderBinaryTree`2.#ctor(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.GetGridLabel{`0},CrawfisSoftware.Collections.Graph.GetEdgeLabel{`1},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="width">The width of the desired maze</param>
            <param name="height">The height of the desired maze</param>
            <param name="nodeAccessor">A function to retrieve any node labels</param>
            <param name="edgeAccessor">A function to retrieve any edge weights</param>
            <param name="percentHorizontal">Control to favor horizontal or vertical runs</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderBinaryTree`2.#ctor(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{`0,`1},System.Int32)">
            <summary>
            Constructor, Takes an existing maze builder (derived from MazeBuilderAbstract) and copies the state over.
            </summary>
            <param name="mazeBuilder">A maze builder</param>
            <param name="percentHorizontal">Control to favor horizontal or vertical runs</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderBinaryTree`2.CreateMaze(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeBuilderBitEdges`2">
            <summary>
            Create a maze given a compressed set of bit patterns for the vertical and horizontal edges on a grid
            </summary>
            <typeparam name="N">The type used for node labels</typeparam>
            <typeparam name="E">The type used for edge weights</typeparam>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderBitEdges`2.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.GetGridLabel{`0},CrawfisSoftware.Collections.Graph.GetEdgeLabel{`1})">
            <summary>
            Constructor
            </summary>
            <param name="width">The width of the desired maze. Must be less than 7.</param>
            <param name="height">The height of the desired maze. Must be less than 7.</param>
            <param name="verticalBits">A bit pattern representing the vertical passages in a small maze. E.g., 725552</param>
            <param name="horizontalBits">A bit pattern representing the horizontal passages in a small maze. E.g., 5421551</param>
            <param name="nodeAccessor">A function to retrieve any node labels</param>
            <param name="edgeAccessor">A function to retrieve any edge weights</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderBitEdges`2.#ctor(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{`0,`1},System.Int32,System.Int32)">
            <summary>
            Constructor, Takes an existing maze builder (derived from MazeBuilderAbstract) and copies the state over.
            </summary>
            <param name="mazeBuilder">A maze builder</param>
            <param name="verticalBits">A bit pattern representing the vertical passages in a small maze.</param>
            <param name="horizontalBits">A bit pattern representing the horizontal passages in a small maze.</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderBitEdges`2.CreateMaze(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeBuilderBraids">
            <summary>
            Given an existing maze builder, extensions to carve more passages that may cause loops or braid a perfect maze.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderBraids.MergeDeadEndsRandomly``2(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{``0,``1},System.Boolean,System.Boolean)">
            <summary>
            Provides a braid for the maze, randomly connecting dead-end cell to a neighbor. 
            </summary>
            <typeparam name="N">The type used for node labels</typeparam>
            <typeparam name="E">The type used for edge weights</typeparam>
            <param name="mazeBuilder">the underlying MazeBuilder</param>
            <param name="preserveExistingCells">Boolean indicating whether to only replace maze cells that are undefined.</param>
            <param name="carveNeighbors">True to keep the underlying maze consistent. False to just modify the dead-end cell.</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderBraids.MergeAdjacentCells``2(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{``0,``1},CrawfisSoftware.Collections.Maze.MazeMetricsComputations{``0,``1},System.Func{CrawfisSoftware.Collections.Graph.IIndexedEdge{``1},CrawfisSoftware.Collections.Maze.MazeCellMetrics,CrawfisSoftware.Collections.Maze.MazeCellMetrics,System.Single},System.Single,System.Boolean,System.Func{System.Int32,System.Single,CrawfisSoftware.Collections.Graph.IIndexedEdge{``1},System.Boolean},System.Boolean)">
            <summary>
            General routine to merge adjacent cells using scores and functions.
            </summary>
            <typeparam name="N">The type used for node labels</typeparam>
            <typeparam name="E">The type used for edge weights</typeparam>
            <param name="mazeBuilder">the underlying MazeBuilder</param>
            <param name="mazeMetricsComputations">Pre-computed maze metrics.</param>
            <param name="computeWallScore">A function that computes a "score" for a wall using cell metrics and edge properties.</param>
            <param name="thresholdToRemove">If the wall score is greater than this threshold it is added to a candidate set to carve.</param>
            <param name="sortResults">If true, sort the candidate set according to the score.</param>
            <param name="keepCarvingPredicate">A predicate to stop the carving based on the number of walls carved, the current score and the edge.</param>
            <param name="preserveExistingCells">Boolean indicating whether to only replace maze cells that are undefined.
            Default is false.</param>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeBuilderExpander`2">
            <summary>
            Expand an existing MazeBuilder to have wider opening, and/or wider walls, and/or a border
            </summary>
            <typeparam name="N">The type used for node labels</typeparam>
            <typeparam name="E">The type used for edge weights</typeparam>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderExpander`2.#ctor(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{`0,`1})">
            <summary>
            Constructor.
            </summary>
            <param name="mazeBuilder">A previous MazeBuilder</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderExpander`2.ExpandWalls(System.Int32)">
            <summary>
            Set the size of the wall thickness in terms of the number of cells The default wall size is 0.
            </summary>
            <param name="numberOfTilesToExpandBy">The number of cells to expand each wall to.</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderExpander`2.ExpandOpenings(System.Int32)">
            <summary>
            Increase the opening thickness in terms of the number of cells. The default opening size is 1.
            </summary>
            <param name="numberOfTilesToExpandBy">The number of cells to expand each opening to.</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderExpander`2.AddBorder(System.Int32)">
            <summary>
            Set the size of a border on all sides in terms of the number of cells (default is 0).
            </summary>
            <param name="numberOfTilesToExpandBy">The number of cells for the border.</param>
            <remarks>Note: The Start and End cells will be set to the interior of the maze corresponding to the mapped cell location previously. 
            Use one of the path carving algorithms to create an exit out of the boundary.</remarks>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderExpander`2.CreateMaze(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeBuilderExplicit`2">
            <summary>
            Create a maze by explicitly setting each cell
            </summary>
            <typeparam name="N">The type used for node labels</typeparam>
            <typeparam name="E">The type used for edge weights</typeparam>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderExplicit`2.#ctor(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.GetGridLabel{`0},CrawfisSoftware.Collections.Graph.GetEdgeLabel{`1})">
            <summary>
            Constructor
            </summary>
            <param name="width">The width of the desired maze</param>
            <param name="height">The height of the desired maze</param>
            <param name="nodeAccessor">A function to retrieve any node labels</param>
            <param name="edgeAccessor">A function to retrieve any edge weights</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderExplicit`2.#ctor(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{`0,`1})">
            <summary>
            Constructor, Takes an existing maze builder (derived from MazeBuilderAbstract) and copies the state over.
            </summary>
            <param name="mazeBuilder">A maze builder</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderExplicit`2.CreateMaze(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeBuilderModifiers`2">
            <summary>
            Modify a maze based on maze metrics.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderModifiers`2.#ctor(CrawfisSoftware.Collections.Maze.Maze{`0,`1},CrawfisSoftware.Collections.Maze.MazeMetricsComputations{`0,`1},CrawfisSoftware.Collections.Graph.GetGridLabel{`0},CrawfisSoftware.Collections.Graph.GetEdgeLabel{`1})">
            <summary>
            Constructor
            </summary>
            <param name="maze">The initial maze</param>
            <param name="metricsComputations">A set of maze metrics.</param>
            <param name="nodeAccessor">A function to retrieve any node labels</param>
            <param name="edgeAccessor">A function to retrieve any edge weights</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderModifiers`2.CreateMaze(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderModifiers`2.TrimDeadEnds(System.Int32)">
            <summary>
            Trim all dead-ends to a specified maximum length.
            </summary>
            <param name="maxDeadEndLength">Length in number of cells.</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderModifiers`2.TrimDeadEnds(System.Int32,System.Int32)">
            <summary>
            Trim a specific dead-end to the specified maximum length.
            </summary>
            <param name="branchId">The solution path cell id.</param>
            <param name="maxDeadEndLength">Length in number of cells.</param>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeBuilderRecursiveBacktracker`2">
            <summary>
            Generate a Maze using depth-first search (Recursive Backtracking)
            </summary>
            <typeparam name="N">The type used for node labels</typeparam>
            <typeparam name="E">The type used for edge weights</typeparam>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderRecursiveBacktracker`2.#ctor(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.GetGridLabel{`0},CrawfisSoftware.Collections.Graph.GetEdgeLabel{`1})">
            <summary>
            Constructor
            </summary>
            <param name="width">The width of the desired maze</param>
            <param name="height">The height of the desired maze</param>
            <param name="nodeAccessor">A function to retrieve any node labels</param>
            <param name="edgeAccessor">A function to retrieve any edge weights</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderRecursiveBacktracker`2.#ctor(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{`0,`1})">
            <summary>
            Constructor, Takes an existing maze builder (derived from MazeBuilderAbstract) and copies the state over.
            </summary>
            <param name="mazeBuilder">A maze builder</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderRecursiveBacktracker`2.CreateMaze(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeBuilderRecursiveDivision`2">
            <summary>
            Create a maze using the Recursive Division algorithm
            </summary>
            <typeparam name="N">The type used for node labels</typeparam>
            <typeparam name="E">The type used for edge weights</typeparam>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.MazeBuilderRecursiveDivision`2.SplitHorizontalOrVertical">
            <summary>
            A function to determine whether to split horizontally or vertically.
            It takes in the width and height of the region and return true if it
            should split horizontally, false if it should split vertically. 
            Default implementation splits the axes with the longer side length.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.MazeBuilderRecursiveDivision`2.HorizontalSplitDecision">
            <summary>
            Function to take the current column and width and return the column to split.
            Should return -1 if the splitting should stop (width &lt; 2). Default implementation
            splits a randomly from column to column+width-1.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.MazeBuilderRecursiveDivision`2.VerticalSplitDecision">
            <summary>
            Function to take the current row and height and return the row to split.
            Should return -1 if the splitting should stop (height &lt; 2). Default implementation
            splits a randomly from row to row+height-1.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderRecursiveDivision`2.#ctor(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.GetGridLabel{`0},CrawfisSoftware.Collections.Graph.GetEdgeLabel{`1})">
            Constructor
            <summary>
            <param name="width">The width of the desired maze</param>
            <param name="height">The height of the desired maze</param>
            <param name="nodeAccessor">A function to retrieve any node labels</param>
            <param name="edgeAccessor">A function to retrieve any edge weights</param>
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderRecursiveDivision`2.#ctor(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{`0,`1})">
            <summary>
            Constructor, Takes an existing maze builder (derived from MazeBuilderAbstract) and copies the state over.
            </summary>
            <param name="mazeBuilder">A maze builder</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderRecursiveDivision`2.CreateMaze(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeBuilderShortestPaths`2">
            <summary>
            Craft a "maze" by carving specific paths.
            </summary>
            <typeparam name="N">The type used for node labels</typeparam>
            <typeparam name="E">The type used for edge weights</typeparam>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderShortestPaths`2.EdgeComparerUsingGetEdgeLabel(CrawfisSoftware.Collections.Graph.IIndexedEdge{System.Single},CrawfisSoftware.Collections.Graph.Direction,CrawfisSoftware.Collections.Graph.Direction)">
            <summary>
            Static function that can be assigned to the EdgeFunction. This one just returns the edge's value when the Edge Type is a float.
            </summary>
            <param name="edge">The indexed edge.</param>
            <param name="fromCell">The (current) set of directions the "from" cell has.</param>
            <param name="toCell">The (current) set of directions the "to" cell has.</param>
            <returns>A float value to use as the edge value.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderShortestPaths`2.EdgeComparerUsingGetEdgeLabel(CrawfisSoftware.Collections.Graph.IIndexedEdge{System.Int32},CrawfisSoftware.Collections.Graph.Direction,CrawfisSoftware.Collections.Graph.Direction)">
            <summary>
            Static function that can be assigned to the EdgeFunction. This one just returns the edge's value when the Edge Type is a int (as a float).
            </summary>
            <param name="edge">The indexed edge.</param>
            <param name="fromCell">The (current) set of directions the "from" cell has.</param>
            <param name="toCell">The (current) set of directions the "to" cell has.</param>
            <returns>A float value to use as the edge value.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderShortestPaths`2.ConstantOfOne(CrawfisSoftware.Collections.Graph.IIndexedEdge{`1},CrawfisSoftware.Collections.Graph.Direction,CrawfisSoftware.Collections.Graph.Direction)">
            <summary>
            Static function that can be assigned to the EdgeFunction. This one just returns the value of one as a float.
            </summary>
            <param name="edge">The indexed edge.</param>
            <param name="fromCell">The (current) set of directions the "from" cell has.</param>
            <param name="toCell">The (current) set of directions the "to" cell has.</param>
            <returns>The floating value 1.0f.</returns>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.MazeBuilderShortestPaths`2.EdgeFunction">
            <summary>
            A function that takes the edge and the two cells current set of maze directions and returns a float.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderShortestPaths`2.#ctor(CrawfisSoftware.Collections.Maze.MazeBuilderAbstract{`0,`1})">
            <summary>
            Constructor initialized with a prior MazeBuilder.
            </summary>
            <param name="mazeBuilder">A maze builder.</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderShortestPaths`2.#ctor(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.GetGridLabel{`0},CrawfisSoftware.Collections.Graph.GetEdgeLabel{`1})">
            <summary>
            Constructor.
            </summary>
            <param name="width">The width of the desired maze</param>
            <param name="height">The height of the desired maze</param>
            <param name="nodeAccessor">A function to retrieve any node labels</param>
            <param name="edgeAccessor">A function to retrieve any edge weights</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderShortestPaths`2.CarvePath(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Carves a path from the starting cell to the ending cell.
            </summary>
            <param name="startingCell">The index of the starting cell.</param>
            <param name="endingCell">The index of the ending cell.</param>
            <param name="preserveExistingCells">Boolean indicating whether to only replace maze cells that are undefined.
            Default is false.</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderShortestPaths`2.CarveAllShortestPathsToTarget(System.Int32,System.Boolean,System.Single)">
            <summary>
            Carves path to every node in the underlying grid from the target cell that are reachable for a fixed cost.
            </summary>
            <param name="targetCell">A grid cell index.</param>
            <param name="preserveExistingCells">Boolean indicating whether to only replace maze cells that are undefined.
            Default is false.</param>
            <param name="maxCost">The maximum cost that a node is reachable.</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderShortestPaths`2.CreateMaze(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeBuilderUtility`2">
            <summary>
            Static class for some useful tools to build mazes
            </summary>
            <typeparam name="N">The type used for node labels</typeparam>
            <typeparam name="E">The type used for edge weights</typeparam>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderUtility`2.CreateMazeFromCSVFile(System.String,CrawfisSoftware.Collections.Graph.GetGridLabel{`0},CrawfisSoftware.Collections.Graph.GetEdgeLabel{`1})">
            <summary>
            Create a maze from a CSV file
            </summary>
            <param name="filename">Path and filename of the csv file to open.</param>
            <param name="nodeAccessor">A function to retrieve any node labels</param>
            <param name="edgeAccessor">A function to retrieve any edge weights</param>
            <returns></returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderUtility`2.MoveOriginToLowerLeft(System.Int32,System.Int32,System.Collections.Generic.IList{CrawfisSoftware.Collections.Graph.Direction})">
            <summary>
            Utility on Direction that will take a stream of directions with the y origin as the top
            and produce a 2D grid of Directions with the y origin as the bottom row.
            </summary>
            <param name="width">The desired width of the maze</param>
            <param name="height">The desired height of the maze</param>
            <param name="directions">A stream of directions starting from the lower-left corner.</param>
            <returns>A 2D grid of Directions</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderUtility`2.CreateMaze(System.Int32,System.Int32,System.Collections.Generic.IList{CrawfisSoftware.Collections.Graph.Direction})">
            <summary>
            Create a maze given a stream of directions
            </summary>
            <param name="width">The desired width of the maze</param>
            <param name="height">The desired height of the maze</param>
            <param name="directions">A stream of directions starting from the lower-left corner.</param>
            <returns>A new maze</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderUtility`2.CreateMaze(System.Int32,System.Int32,System.Collections.Generic.IList{CrawfisSoftware.Collections.Graph.Direction},CrawfisSoftware.Collections.Graph.GetGridLabel{`0},CrawfisSoftware.Collections.Graph.GetEdgeLabel{`1})">
            <summary>
            Create a maze given a stream of directions
            </summary>
            <param name="width">The desired width of the maze</param>
            <param name="height">The desired height of the maze</param>
            <param name="directions">A stream of directions starting from the lower-left corner.</param>
            <param name="nodeAccessor">A function to retrieve any node labels</param>
            <param name="edgeAccessor">A function to retrieve any edge weights</param>
            <returns>A new maze</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderUtility`2.CreateMaze(CrawfisSoftware.Collections.Graph.Direction[0:,0:],CrawfisSoftware.Collections.Graph.GetGridLabel{`0},CrawfisSoftware.Collections.Graph.GetEdgeLabel{`1})">
            <summary>
            Create a maze from a grid of Directions
            </summary>
            <param name="directions">A 2D array of Directions for the maze</param>
            <param name="nodeAccessor">A function to retrieve any node labels</param>
            <param name="edgeAccessor">A function to retrieve any edge weights</param>
            <returns>A maze</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderUtility`2.DummyNodeValues(System.Int32,System.Int32)">
            <summary>
            Function that always returns 1
            </summary>
            <param name="i">Column index of a cell.</param>
            <param name="j">Row index of a cell.</param>
            <returns>The default value for the <typeparamref name="N"/>.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeBuilderUtility`2.DummyEdgeValues(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.Direction)">
            <summary>
            Function that always returns the default value
            </summary>
            <param name="i">Column index of a cell.</param>
            <param name="j">Row index of a cell.</param>
            <param name="dir">Direction of the desired edge</param>
            <returns>The default value for the <typeparamref name="E"/>.</returns>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.EdgeFlow">
            <summary>
            Encoding for maze's that can prescribe the "direction" from the start (Entrance to an exit). Alternative exits from main paths.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.EdgeFlow.None">
            <summary>
            The node is unreachable.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.EdgeFlow.Entrance">
            <summary>
            THe entrance to the cell.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.EdgeFlow.PrimaryExit">
            <summary>
            An exit from the cell. Typically along the solution path or main dead-end branch.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.EdgeFlow.SecondaryExit">
            <summary>
            There is more than 1 exit and this one is labeled as secondary.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.EdgeFlow.ThirdExit">
            <summary>
            Typically, the cell is a cross section with one exit labeled as Primary another as Secondary and this one as a 3rd possible exit.
            </summary>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeCellMetrics">
            <summary>
            Metrics on a per cell basis for a maze.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeCellMetrics.DistanceFromStart">
            <summary>
            The distance travelled from the start to reach this cell.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeCellMetrics.DistanceToEnd">
            <summary>
            Distance needed to reach the exit.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeCellMetrics.LeftEdgeFlow">
            <summary>
            A label for the left edge of the cell.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeCellMetrics.TopEdgeFlow">
            <summary>
            A label for the top edge of the cell.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeCellMetrics.RightEdgeFlow">
            <summary>
            A label for the right edge of the cell.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeCellMetrics.BottomEdgeFlow">
            <summary>
            A label for the bottom edge of the cell.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeCellMetrics.BranchLevel">
            <summary>
            An indicator of how deep in the maze (from a complexity point of view) or the number of decisions. It depends on the algorithm used to calculate the branch levels.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeCellMetrics.PathDistanceToSolution">
            <summary>
            The distance needed to get back to the solution path.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeCellMetrics.GridDistanceToSolution">
            <summary>
            How close to the solution path this cell is ignoring the maze tunnels (as a bird flies)
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeCellMetrics.BranchId">
            <summary>
            A unique id for the entire dead-end branch. It contains the solution cell that the branch is attached to and the edge it is attached to.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeCellMetrics.Parent">
            <summary>
            The node that was used to reach this node.
            </summary>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeMetrics">
            <summary>
            Metrics on the overall Maze.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeMetrics.SolutionPathMetric">
            <summary>
            The solution path and metrics on it.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeMetrics.NumberOfDeadEndCells">
            <summary>
            Count of the number of dead-end cells.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeMetrics.NumberOfStraightCells">
            <summary>
            Count of the number of straight cells.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeMetrics.NumberOfTurnCells">
            <summary>
            Count of the number of cells with turns.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeMetrics.NumberOfTJunctionCells">
            <summary>
            Count of the number of cells with T-junctions.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeMetrics.NumberOfCrossJunctionCells">
            <summary>
            Count of the number of cells with cross-sections or open.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeMetrics.NumberOfSolidCells">
            <summary>
            Count of cells that are not reachable.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeMetrics.NumberOfUndefinedCells">
            <summary>
            Count of the number cells with the Undefined flag.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeMetrics.MaxBranchLevel">
            <summary>
            The maximum number of times a secondary or third exit will be crossed when traversing the maze.
            </summary>
            <remarks>This is dependent on how the Branch level is defined per cell and the algorithmic choice for what a branch means. Currently implementation has a main branch for each dead-end (recursively).</remarks>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeMetrics.MaxDeadEndLength">
            <summary>
            The maximum distance any ded-end cell is from the solution path.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeMetrics.MaxDistanceFromStart">
            <summary>
            The furthest distance reachable from the start node.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.MazeMetrics.MaxDistanceToEnd">
            <summary>
            The furthest distance any cell is from the exit.
            </summary>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2">
            <summary>
            Computes metrics on a maze and allows for easy access to both global metrics and per cell metrics.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.OverallMetrics">
            <summary>
            Get the metrics pertaining to the entire maze.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.#ctor(CrawfisSoftware.Collections.Maze.Maze{`0,`1})">
            <summary>
            Constructor
            </summary>
            <param name="maze">The maze to compute analytics on.</param>
            <remarks>Call the various Computation methods prior to accessing data. This allows the use to pick and choose which computations should be 
            performed <seealso cref="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.ComputeAllMetrics(System.Random,CrawfisSoftware.Collections.Graph.Direction)"/>.</remarks>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.ComputeAllMetrics(System.Random,CrawfisSoftware.Collections.Graph.Direction)">
            <summary>
            Compute all available per cell Metrics.
            </summary>
            <param name="random"></param>
            <param name="exitDirection">Unless the exit is a dead-end, this should be specified to indicate how the solution path exits the grid.</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.GetCellMetrics(System.Int32,System.Int32)">
            <summary>
            Get metrics pertaining to a single cell.
            </summary>
            <param name="column">The grid column of the cell.</param>
            <param name="row">The grid row of the cell.</param>
            <returns>A MazeCellMetrics.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.GetCellMetrics(System.Int32)">
            <summary>
            Get metrics pertaining to a single cell.
            </summary>
            <param name="cellIndex">The grid cell index.</param>
            <returns>A MazeCellMetrics.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.ComputeMazeDistanceFromSolutionPath(System.Int32)">
            <summary>
            Compute the maze-distance (path distance) from the solution path.
            </summary>
            <param name="unreachableDistance">If the cell is not reachable from the solution path, set the distance to this value.</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.ComputeGridDistanceFromSolutionPath">
            <summary>
            Compute the non-maze, grid-based distance each cell is from the solution path.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.ComputeBranchLevels(System.Boolean)">
            <summary>
            Compute branch levels for the maze, where the level is based on the number of second and third exit crossings.
            </summary>
            <param name="setBranchRootToSolution">If True (default), then the BranchID's are based on the solution path. 
            If false, the BranchID's are the closest ancestor with a junction (a branch).</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.ComputeDistancesFromStart">
            <summary>
            Compute the distance (in number of cells) from the start.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.ComputeDistancesToEnd">
            <summary>
            Compute the distance (in number of cells) to reach the end.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.DirectionsFromStart">
            <summary>
            Computes for each edge of a cell whether it is reached from the start (Entrance) or not (and Exit - In this case always a PrimaryExit).
            </summary>
            <seealso cref="!:AddSecondaryExistsOnPath"/>
            <seealso cref="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.RandomlyAssignSecondaryExits(System.Random)"/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.ComputeSolutionPath">
            <summary>
            Compute metrics on the solution path for the maze.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.AddSecondaryExitsOnPath(CrawfisSoftware.Collections.Graph.Direction)">
            <summary>
            Convert multiple PrimaryExits on T-junctions and Cross-Junctions to Secondary Exits along the solution path to the maze.
            </summary>
            <param name="exitDirection">Unless the exit is a dead-end, this should be specified to indicate how the solution path exits the grid.</param>
            <remarks>Calls DirectionsFromStart is not called already.</remarks>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.AddSecondaryExitsOnPath(System.Int32,System.Int32,CrawfisSoftware.Collections.Graph.Direction)">
            <summary>
            Convert multiple PrimaryExits on T-junctions and Cross-Junctions to Secondary Exits along the path from the specified startingCell to the endingCell.
            </summary>
            <param name="startingCell">The starting cell of the path to apply directions to.</param>
            <param name="endingCell">The ending cell of the path to apply directions to.</param>
            <param name="exitDirection">Unless the exit is a dead-end, this should be specified to indicate how the solution path exits the grid.</param>
            <remarks>Calls DirectionsFromStart is not called already.</remarks>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.AssignSecondaryExitsToAllJunctions(System.Boolean)">
            <summary>
            Finds all Cross-sections and T-Junctions and relabel all PrimaryExits to SecondaryExits.
            </summary>
            <param name="ignoreSolutionPath">If true, no edges on the solution path will be changed.</param>
            <remarks>Requires solution path metrics to be computed if ignoreSolutionPath is true.</remarks>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.RandomlyAssignSecondaryExits(System.Random)">
            <summary>
            Finds all Cross-sections and T-Junctions where the EdgeFlow directions contain multiple PrimaryExits and converts all but one to SecondaryExits.
            </summary>
            <param name="random">A Random number generator</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeMetricsComputations`2.RandomlyAssignTertiaryExits(System.Random)">
            <summary>
            Finds all Cross-sections where the EdgeFlow directions contain multiple SecondaryExits and converts one of them to a ThirdExit.
            </summary>
            <param name="random">A Random number generator</param>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.TileStyle">
            <summary>
            Predefined OccupancyGrid stamp styles (tile styles).
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.TileStyle.Small2x2">
            <summary>
            A 2x2 tile style for an OccupancyGrid.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.TileStyle.Tight3x3">
            <summary>
            A 3x3 tile style with a cross for a cross-section.
            </summary>
        </member>
        <member name="F:CrawfisSoftware.Collections.Maze.TileStyle.Open3x3">
            <summary>
            A 3x3 tile style with edges more open for junctions.
            </summary>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeOccupancyGrids">
            <summary>
            Static methods to convert a Maze to an OccupancyGrid.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeOccupancyGrids.ReplaceDirectionsWithStamps``2(CrawfisSoftware.Collections.Maze.Maze{``0,``1},CrawfisSoftware.Collections.Graph.StampSet{CrawfisSoftware.Collections.Graph.Direction})">
            <summary>
            Given a maze and a stamp set associating directions to stamps, create and return an occupancy grid.
            </summary>
            <typeparam name="N">The type used for node labels in the maze.</typeparam>
            <typeparam name="E">The type used for edge weights in the maze.</typeparam>
            <param name="maze">The maze.</param>
            <param name="stampSet">A stamp set with Direction as the associated type for id's.</param>
            <returns>An OccupancyGrid.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeOccupancyGrids.CreateOccupancyGridFromMaze``2(CrawfisSoftware.Collections.Maze.Maze{``0,``1},CrawfisSoftware.Collections.Graph.StampSet{CrawfisSoftware.Collections.Graph.Direction})">
            <summary>
            Given a maze and a stamp set associating directions to stamps, create and return an occupancy grid.
            </summary>
            <typeparam name="N">The type used for node labels in the maze.</typeparam>
            <typeparam name="E">The type used for edge weights in the maze.</typeparam>
            <param name="maze">The maze.</param>
            <param name="stampSet">A stamp set with Direction as the associated type for id's.</param>
            <returns>An OccupancyGrid.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeOccupancyGrids.CreateOccupancyGridFromMaze``2(CrawfisSoftware.Collections.Maze.Maze{``0,``1},CrawfisSoftware.Collections.Maze.TileStyle)">
            <summary>
            Given a maze create and return an occupancy grid.
            </summary>
            <typeparam name="N">The type used for node labels in the maze.</typeparam>
            <typeparam name="E">The type used for edge weights in the maze.</typeparam>
            <param name="maze">The maze.</param>
            <param name="tileStyle">The style of the underlying stamp set to use. Default is to replace each cell with a 3x3 occupancy grid having all of the corners blocked.</param>
            <returns>An OccupancyGrid.</returns>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeQuery">
            <summary>
            Helper static class for listing cells with a certain configuration.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeQuery.DeadEnds``2(CrawfisSoftware.Collections.Maze.Maze{``0,``1})">
            <summary>
            Lists the grid (row,column) tuple of each dead-end.
            </summary>
            <param name="maze">The maze to query.</param>
            <returns>An IEnumerable of Tuples containing the row and column.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeQuery.TJunctions``2(CrawfisSoftware.Collections.Maze.Maze{``0,``1})">
            <summary>
            Lists the grid (row,column) tuple of each TJunction.
            </summary>
            <param name="maze">The maze to query.</param>
            <returns>An IEnumerable of Tuples containing the row and column.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeQuery.Straights``2(CrawfisSoftware.Collections.Maze.Maze{``0,``1})">
            <summary>
            Lists the grid (row,column) tuple of each horizontal or vertical cell.
            </summary>
            <param name="maze">The maze to query.</param>
            <returns>An IEnumerable of Tuples containing the row and column.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeQuery.StraightAways``2(CrawfisSoftware.Collections.Maze.Maze{``0,``1})">
            <summary>
            Lists the grid (row,column) tuple of each start of a sequence of horizontal or vertical cells (no junctions).
            </summary>
            <param name="maze">The maze to query.</param>
            <returns>An IEnumerable of Tuples containing the starting cell index, the direction and the length of the straightaway.</returns>
            <remarks>Uses Depth-First Search from the Maze's starting cell. This should be a turn/junction cell.</remarks>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeQuery.Turns``2(CrawfisSoftware.Collections.Maze.Maze{``0,``1})">
            <summary>
            Lists the grid (row,column) tuple of each cell containing only a turn.
            </summary>
            <param name="maze">The maze to query.</param>
            <returns>An IEnumerable of Tuples containing the row and column.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeQuery.CrossSections``2(CrawfisSoftware.Collections.Maze.Maze{``0,``1})">
            <summary>
            Lists the grid (row,column) tuple of each cross-section.
            </summary>
            <param name="maze">The maze to query.</param>
            <returns>An IEnumerable of Tuples containing the row and column.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeQuery.MatchingExactly``2(CrawfisSoftware.Collections.Maze.Maze{``0,``1},CrawfisSoftware.Collections.Graph.Direction)">
            <summary>
            Lists the grid (row,column) tuple of each matching exactly the set of Directions.
            </summary>
            <param name="maze">The maze to query.</param>
            <param name="directions">An set of directions as a Direction Flag (enum).</param>
            <returns>An IEnumerable of Tuples containing the row and column.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeQuery.ContainsAll``2(CrawfisSoftware.Collections.Maze.Maze{``0,``1},CrawfisSoftware.Collections.Graph.Direction)">
            <summary>
            Lists the grid (row,column) tuple of each cell that contain the set of directions.
            </summary>
            <param name="maze">The maze to query.</param>
            <param name="directions">An set of directions as a Direction Flag (enum).</param>
            <returns>An IEnumerable of Tuples containing the row and column.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeQuery.ContainsAny``2(CrawfisSoftware.Collections.Maze.Maze{``0,``1},CrawfisSoftware.Collections.Graph.Direction)">
            <summary>
            Lists the grid (row,column) tuple of each cell that contain any of directions.
            </summary>
            <param name="maze">The maze to query.</param>
            <param name="directions">An set of directions as a Direction Flag (enum).</param>
            <returns>An IEnumerable of Tuples containing the row and column.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeQuery.FindInconsistentEdges``2(CrawfisSoftware.Collections.Maze.Maze{``0,``1})">
            <summary>
            Query the maze to find all edges between cells where the directions do not match: Goes East but East neighbor does not go West.
            </summary>
            <param name="maze">The maze to query.</param>
            <returns>An IEnumerable of Tuples containing the cell index of the cell that has an extra direction and the inconsistent neighbor cell index.</returns>
        </member>
        <member name="T:CrawfisSoftware.Collections.Maze.MazeUtility">
            <summary>
            Static methods extending the Maze class.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Maze.MazeUtility.Inverse``2(CrawfisSoftware.Collections.Maze.Maze{``0,``1},System.Boolean,CrawfisSoftware.Collections.Graph.GetGridLabel{``0},CrawfisSoftware.Collections.Graph.GetEdgeLabel{``1})">
            <summary>
            Given a maze, reverses its directions. Undefined is handled separately.
            </summary>
            <typeparam name="N">The type used for node labels</typeparam>
            <typeparam name="E">The type used for edge weights</typeparam>
            <param name="maze">The maze to invert.</param>
            <param name="removeUndefines">If false, Direction.Undefined is preserved.If true, Direction.Undefined is ignored and stripped.</param>
            <param name="nodeAccessor">A function to retrieve any node labels</param>
            <param name="edgeAccessor">A function to retrieve any edge weights</param>
            <returns>A maze</returns>
            <remarks>The NodeAccessor and EdgeAccessor's are not preserved by default.</remarks>
        </member>
    </members>
</doc>
