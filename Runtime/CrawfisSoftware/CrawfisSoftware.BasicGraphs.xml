<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CrawfisSoftware.BasicGraphs</name>
    </assembly>
    <members>
        <member name="T:CrawfisSoftware.Collections.Graph.CompleteIndexedGraph`2">
            <summary>
            Light weight implementation of a complete graph using functions 
            for the edge weights and node labels.
            </summary>
            <typeparam name="N">The type used for node labels or data.</typeparam>
            <typeparam name="E">The type used for edge weights or data.</typeparam>
        </member>
        <member name="P:CrawfisSoftware.Collections.Graph.CompleteIndexedGraph`2.NumberOfEdges">
            <inheritdoc/>
        </member>
        <member name="P:CrawfisSoftware.Collections.Graph.CompleteIndexedGraph`2.NumberOfNodes">
            <inheritdoc/>
        </member>
        <member name="P:CrawfisSoftware.Collections.Graph.CompleteIndexedGraph`2.Nodes">
            <inheritdoc/>
        </member>
        <member name="P:CrawfisSoftware.Collections.Graph.CompleteIndexedGraph`2.Edges">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.CompleteIndexedGraph`2.#ctor(System.Int32,System.Func{System.Int32,`0}@,System.Func{System.Int32,System.Int32,`1}@)">
            <summary>
            Constructor.
            </summary>
            <param name="numberOfNodes">The number of nodes in this complete graph.</param>
            <param name="nodeLabelFunc">A delegate (Func) that takes a node index (int) and returns
            a node label (N).</param>
            <param name="edgeLabelFunc">A delegate (Func) that takes two node indices (int's) and 
            returns an edge label (E).</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.CompleteIndexedGraph`2.ContainsEdge(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.CompleteIndexedGraph`2.GetEdgeLabel(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.CompleteIndexedGraph`2.GetNodeLabel(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.CompleteIndexedGraph`2.InEdges(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.CompleteIndexedGraph`2.Neighbors(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.CompleteIndexedGraph`2.OutEdges(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.CompleteIndexedGraph`2.Parents(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.CompleteIndexedGraph`2.TryGetEdgeLabel(System.Int32,System.Int32,`1@)">
            <inheritdoc/>
        </member>
        <member name="T:CrawfisSoftware.Collections.Graph.Graph`2">
            <summary>
            A standard graph implementation of <typeparamref name="IGraph{N,E}{N,E}"/>.
            </summary>
            <typeparam name="N">The type associated at each node. Called a node or node label. Must be unique.</typeparam>
            <typeparam name="E">The type associated at each edge. Also called the edge label.</typeparam>   
        </member>
        <member name="P:CrawfisSoftware.Collections.Graph.Graph`2.NumberOfNodes">
            <summary>
            Get the number of nodes in the graph.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.Graph`2.AddNode(`0)">
            <summary>
            Factory method to create a GraphNode. This is the only way to
            create a GraphNode and aids in the management of the nodes.
            </summary>
            <param name="node">The internal object that the node contains.</param>
            <returns>A new instance of a GraphNode."/></returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.Graph`2.AddEdge(`0,`0,`1,System.Boolean)">
            <summary>
            Add an edge to the graph.
            </summary>
            <param name="from">The node label for the originating node.</param>
            <param name="to">The node label for the destination node.</param>
            <param name="edgeData">An edge label to associate with this edge.</param>
            <param name="undirected">If true (default) an edge is also created in the reverse direction.</param>
        </member>
        <member name="P:CrawfisSoftware.Collections.Graph.Graph`2.Nodes">
            <summary>
            Iterator for the nodes in the graph.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.Graph`2.Neighbors(`0)">
            <summary>
            Iterator for the children or neighbors of the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>An enumerator of nodes.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.Graph`2.Parents(`0)">
            <summary>
            Iterator over the parents or immediate ancestors of a node.
            </summary>
            <remarks>May not be supported by all graphs.</remarks>
            <param name="node">The node.</param>
            <returns>An enumerator of nodes.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.Graph`2.OutEdges(`0)">
            <summary>
            Iterator over the emanating edges from a node.
            </summary>
            <param name="node">The node.</param>
            <returns>An enumerator of nodes.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.Graph`2.InEdges(`0)">
            <summary>
            Iterator over the in-coming edges of a node.
            </summary>
            <remarks>May not be supported by all graphs.</remarks>
            <param name="node">The node.</param>
            <returns>An enumerator of edges.</returns>
        </member>
        <member name="P:CrawfisSoftware.Collections.Graph.Graph`2.Edges">
            <summary>
            Iterator for the edges in the graph, yielding IEdge's
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.Graph`2.ContainsEdge(`0@,`0@)">
            <summary>
            Tests whether an edge exists between two nodes.
            </summary>
            <param name="fromNode">The node that the edge emanates from.</param>
            <param name="toNode">The node that the edge terminates at.</param>
            <returns>True if the edge exists in the graph. False otherwise.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.Graph`2.GetEdgeLabel(`0@,`0@)">
            <summary>
            Gets the label on an edge.
            </summary>
            <param name="fromNode">The node that the edge emanates from.</param>
            <param name="toNode">The node that the edge terminates at.</param>
            <returns>The edge.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.Graph`2.TryGetEdge(`0@,`0@,`1@)">
            <summary>
            Exception safe routine to get the label on an edge.
            </summary>
            <param name="fromNode">The node that the edge emanates from.</param>
            <param name="toNode">The node that the edge terminates at.</param>
            <param name="edge">The resulting edge if the method was successful. A default
            value for the type if the edge could not be found.</param>
            <returns>True if the edge was found. False otherwise.</returns>
        </member>
        <member name="T:CrawfisSoftware.Collections.Graph.GraphBuilder">
            <summary>
            Helper class used to construct a GraphBuilder where we do not care what the node or edge types are.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.GraphBuilder.AddEdge(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Add an edge from node index <paramref name="from"/> to node index <paramref name="to"/>.
            </summary>
            <param name="from">Existing node index for the directed edge.</param>
            <param name="to">Existing node index for the directed edge.</param>
            <param name="undirected">If true (default) an edge is also created in the reverse direction.</param>
        </member>
        <member name="T:CrawfisSoftware.Collections.Graph.GraphBuilder`2">
            <summary>
            Explicit graph building creating a SimpleGraph (which uses an adjacency list).
            </summary>
            <typeparam name="N">The node label type.</typeparam>
            <typeparam name="E">The edge label type.</typeparam>
        </member>
        <member name="P:CrawfisSoftware.Collections.Graph.GraphBuilder`2.DefaultDegree">
            <summary>
            Specifies the default size of the Adjacency lists for each node.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.Collections.Graph.GraphBuilder`2.DefaultSize">
            <summary>
            Specifies the default number of nodes in the resulting graph.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.Collections.Graph.GraphBuilder`2.DefaultNodeValue">
            <summary>
            Set or get a default value for all new nodes.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.GraphBuilder`2.AddNode">
            <summary>
            A a new node with a default node value.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.GraphBuilder`2.AddNode(`0)">
            <summary>
            Add a new node with the specified node value.
            </summary>
            <param name="nodeValue"></param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.GraphBuilder`2.AddEdge(System.Int32,System.Int32,`1,System.Boolean)">
            <summary>
            Add an edge from the 
            </summary>
            <param name="from">The node index of the starting edge node (directional).</param>
            <param name="to">The node index of the ending edge node.</param>
            <param name="edgeValue">An edge vale to assign to the resulting edge.</param>
            <param name="undirected">If true (default) an edge is also created in the reverse direction.</param>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.GraphBuilder`2.GetGraph">
            <summary>
            Extract an <typeparamref name="IGraph{int,int}{int,int}"/> from the builder.
            </summary>
            <returns>An <typeparamref name="IGraph{int,int}{int,int}"/>.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.GraphBuilder`2.Optimize">
            <summary>
            Reduce the storage needed to represent the current state of the graph.
            </summary>
        </member>
        <member name="P:CrawfisSoftware.Collections.Graph.GraphBuilder`2.EdgeCapacity">
            <summary>
            EdgeCapacity is used only to test the Optimize routine in the Unit Testing.
            </summary>
        </member>
        <member name="T:CrawfisSoftware.Collections.Graph.SimpleGraph">
            <summary>
            SimpleGraph takes as input an Adjacency List and
            provides the IGraph wrapper around it.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.SimpleGraph.#ctor(System.Collections.Generic.IList{System.Collections.Generic.ICollection{System.Int32}})">
            <summary>
            Constructor.
            </summary>
            <param name="adjacencies">A list of nodes connected to each node.</param>
        </member>
        <member name="P:CrawfisSoftware.Collections.Graph.SimpleGraph.Nodes">
            <summary>
            Iterator for the nodes in the graph.
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.SimpleGraph.Neighbors(System.Int32)">
            <summary>
            Iterator for the children or neighbors of the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>An enumerator of nodes.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.SimpleGraph.OutEdges(System.Int32)">
            <summary>
            Iterator over the emanating edges from a node.
            </summary>
            <param name="node">The node.</param>
            <returns>An enumerator of nodes.</returns>
        </member>
        <member name="P:CrawfisSoftware.Collections.Graph.SimpleGraph.Edges">
            <summary>
            Iterator for the edges in the graph, yielding IEdge's
            </summary>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.SimpleGraph.ContainsEdge(System.Int32@,System.Int32@)">
            <summary>
            Tests whether an edge exists between two nodes.
            </summary>
            <param name="fromNode">The node that the edge emanates from.</param>
            <param name="toNode">The node that the edge terminates at.</param>
            <returns>True if the edge exists in the graph. False otherwise.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.SimpleGraph.GetEdgeLabel(System.Int32@,System.Int32@)">
            <summary>
            Gets the label on an edge.
            </summary>
            <param name="fromNode">The node that the edge emanates from.</param>
            <param name="toNode">The node that the edge terminates at.</param>
            <returns>The edge.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.SimpleGraph.TryGetEdge(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Exception safe routine to get the label on an edge.
            </summary>
            <param name="fromNode">The node that the edge emanates from.</param>
            <param name="toNode">The node that the edge terminates at.</param>
            <param name="edge">The resulting edge if the method was successful. A default
            value for the type if the edge could not be found.</param>
            <returns>True if the edge was found. False otherwise.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.SimpleGraph.CrawfisSoftware#Collections#Graph#IGraph{System#Int32,System#Int32}#Parents(System.Int32)">
            <summary>
            Iterator over the parents or immediate ancestors of a node.
            </summary>
            <remarks>May not be supported by all graphs.</remarks>
            <param name="node">The node.</param>
            <returns>An enumerator of nodes.</returns>
        </member>
        <member name="M:CrawfisSoftware.Collections.Graph.SimpleGraph.CrawfisSoftware#Collections#Graph#IGraph{System#Int32,System#Int32}#InEdges(System.Int32)">
            <summary>
            Iterator over the in-coming edges of a node.
            </summary>
            <remarks>May not be supported by all graphs.</remarks>
            <param name="node">The node.</param>
            <returns>An enumerator of edges.</returns>
        </member>
    </members>
</doc>
